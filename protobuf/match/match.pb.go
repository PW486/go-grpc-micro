// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/match/match.proto

package match

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetMatchAccountByIDRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMatchAccountByIDRequest) Reset()         { *m = GetMatchAccountByIDRequest{} }
func (m *GetMatchAccountByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetMatchAccountByIDRequest) ProtoMessage()    {}
func (*GetMatchAccountByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6540bdd09502f718, []int{0}
}

func (m *GetMatchAccountByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMatchAccountByIDRequest.Unmarshal(m, b)
}
func (m *GetMatchAccountByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMatchAccountByIDRequest.Marshal(b, m, deterministic)
}
func (m *GetMatchAccountByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMatchAccountByIDRequest.Merge(m, src)
}
func (m *GetMatchAccountByIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetMatchAccountByIDRequest.Size(m)
}
func (m *GetMatchAccountByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMatchAccountByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMatchAccountByIDRequest proto.InternalMessageInfo

func (m *GetMatchAccountByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetMatchAccountByIDResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMatchAccountByIDResponse) Reset()         { *m = GetMatchAccountByIDResponse{} }
func (m *GetMatchAccountByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetMatchAccountByIDResponse) ProtoMessage()    {}
func (*GetMatchAccountByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6540bdd09502f718, []int{1}
}

func (m *GetMatchAccountByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMatchAccountByIDResponse.Unmarshal(m, b)
}
func (m *GetMatchAccountByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMatchAccountByIDResponse.Marshal(b, m, deterministic)
}
func (m *GetMatchAccountByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMatchAccountByIDResponse.Merge(m, src)
}
func (m *GetMatchAccountByIDResponse) XXX_Size() int {
	return xxx_messageInfo_GetMatchAccountByIDResponse.Size(m)
}
func (m *GetMatchAccountByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMatchAccountByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMatchAccountByIDResponse proto.InternalMessageInfo

func (m *GetMatchAccountByIDResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetMatchAccountByIDResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetMatchAccountByIDResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GetMatchAccountByIDRequest)(nil), "match.GetMatchAccountByIDRequest")
	proto.RegisterType((*GetMatchAccountByIDResponse)(nil), "match.GetMatchAccountByIDResponse")
}

func init() { proto.RegisterFile("protobuf/match/match.proto", fileDescriptor_6540bdd09502f718) }

var fileDescriptor_6540bdd09502f718 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0xcf, 0x4d, 0x2c, 0x49, 0xce, 0x80, 0x90, 0x7a, 0x60, 0x41, 0x21,
	0x56, 0x30, 0x47, 0x49, 0x87, 0x4b, 0xca, 0x3d, 0xb5, 0xc4, 0x17, 0xc4, 0x76, 0x4c, 0x4e, 0xce,
	0x2f, 0xcd, 0x2b, 0x71, 0xaa, 0xf4, 0x74, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2,
	0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x51, 0x0a,
	0xe7, 0x92, 0xc6, 0xaa, 0xba, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15, 0x5d, 0xb9, 0x90, 0x08, 0x17,
	0x6b, 0x6a, 0x6e, 0x62, 0x66, 0x8e, 0x04, 0x13, 0x58, 0x08, 0xc2, 0x11, 0x12, 0xe2, 0x62, 0xc9,
	0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x06, 0x0b, 0x82, 0xd9, 0x46, 0xe9, 0x5c, 0xac, 0x60, 0x53, 0x85,
	0xe2, 0xb8, 0x84, 0xb1, 0xd8, 0x20, 0xa4, 0xa8, 0x07, 0x71, 0x3b, 0x6e, 0xb7, 0x4a, 0x29, 0xe1,
	0x53, 0x02, 0x71, 0xa0, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0xf7, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x50, 0xf2, 0xc8, 0xe9, 0x1b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MatchClient is the client API for Match service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatchClient interface {
	GetMatchAccountByID(ctx context.Context, in *GetMatchAccountByIDRequest, opts ...grpc.CallOption) (*GetMatchAccountByIDResponse, error)
}

type matchClient struct {
	cc *grpc.ClientConn
}

func NewMatchClient(cc *grpc.ClientConn) MatchClient {
	return &matchClient{cc}
}

func (c *matchClient) GetMatchAccountByID(ctx context.Context, in *GetMatchAccountByIDRequest, opts ...grpc.CallOption) (*GetMatchAccountByIDResponse, error) {
	out := new(GetMatchAccountByIDResponse)
	err := c.cc.Invoke(ctx, "/match.Match/GetMatchAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServer is the server API for Match service.
type MatchServer interface {
	GetMatchAccountByID(context.Context, *GetMatchAccountByIDRequest) (*GetMatchAccountByIDResponse, error)
}

// UnimplementedMatchServer can be embedded to have forward compatible implementations.
type UnimplementedMatchServer struct {
}

func (*UnimplementedMatchServer) GetMatchAccountByID(ctx context.Context, req *GetMatchAccountByIDRequest) (*GetMatchAccountByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchAccountByID not implemented")
}

func RegisterMatchServer(s *grpc.Server, srv MatchServer) {
	s.RegisterService(&_Match_serviceDesc, srv)
}

func _Match_GetMatchAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchAccountByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).GetMatchAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.Match/GetMatchAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).GetMatchAccountByID(ctx, req.(*GetMatchAccountByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Match_serviceDesc = grpc.ServiceDesc{
	ServiceName: "match.Match",
	HandlerType: (*MatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatchAccountByID",
			Handler:    _Match_GetMatchAccountByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/match/match.proto",
}
